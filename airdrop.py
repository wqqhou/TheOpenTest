"""
Description: Airdrop NFTs to users
Author: Matt Hou
Date: 2023-10-27
Version: Beta 1.1.1
Update Log: 
    1. Adding sentry module to track performace and errors
"""
# Importing libraries
from aiogram import Bot
from aiogram.types import ParseMode
import asyncio
import json
import sqlite3
import aiohttp
import sentry_sdk
import config

sentry_sdk.init(
    dsn="https://31f715d7ba61cef76e24188d19e6ebfb@o4506132003684352.ingest.sentry.io/4506132013776896",
    enable_tracing=True
)

# Replace with your own token
bot = Bot(token=config.BOT_TOKEN)

# Initialize dispatcher
async def main():
    
    # Get Preloaded NFTs metadata from file
    with open('metadata.json', "r", encoding="utf-8") as f:
        nft_resp = json.load(f)

    # List of users to airdrop
    drop_list = ['460929450','730458657']

    # Airdrop NFTs
    async with aiohttp.ClientSession() as session:
        for i, item in enumerate(nft_resp['nft_items']):
            # Get user id
            uid = drop_list[i]

            # Proccessing NFT metadata
            nft = item['address']
            name = item['metadata']['name']
            img = item['metadata']['image']
            des = item['metadata']['description']

            # Update database, recording which NFTs users received and its details
            with sqlite3.connect('db.sqlite') as con:
                cur = con.cursor()
                cur.execute(f'UPDATE Users SET nft = nft || ", {nft}" WHERE uid = {uid}')
                cur.execute(f'UPDATE Users SET nft_name = nft_name || "se@pa@ra$to$r {name}" WHERE uid = {uid}')
                cur.execute(f'UPDATE Users SET nft_img = nft_img || ", {img}" WHERE uid = {uid}')
                cur.execute(f'UPDATE Users SET nft_des = nft_des || "se@pa@ra$to$r {des}" WHERE uid = {uid}')
                con.commit()

            # Send notification to users with NFTs names, images and descriptions
            async with session.get(img) as resp:  
                nft_img = await resp.read()  
            nft_detail = "Name: " + name + "\nDescription:\n" + des   
            await bot.send_message(uid, 'NFT received!\n',
                                   parse_mode=ParseMode.HTML)
            await bot.send_photo(uid, photo = nft_img, caption = nft_detail)

            # Print the airdroped result in the console
            print(f'User: {uid}, NFT: {name}, {nft}')

            # Break the loop if all users have received an airdrop
            if i == len(drop_list) - 1:
                print('Number of NFTs airdroped: ', str(i+1))
                break
    await (await bot.get_session()).close()
asyncio.run(main())