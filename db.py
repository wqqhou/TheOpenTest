# We will use the SQLite database
import sqlite3

# Initialize database connection and cursor
con = sqlite3.connect('db.sqlite')
cur = con.cursor()

# Create table "Users" with uid and balance rows
cur.execute('''CREATE TABLE IF NOT EXISTS Users (
                uid INTEGER,
                nft STRING,
                nft_name STRING
                nft_img STRING
                nft_des STRING
            )''')
cur.execute('''CREATE TABLE IF NOT EXISTS Addrs(
                addr STRING,
                uid INTEGER
        )''')

def check_user(uid):
    # Function to check if user is in database or not

    cur.execute(f'SELECT * FROM Users WHERE uid = {uid}')
    user = cur.fetchone()
    if user:
        return True
    return False

def check_addr(addr):
    cur.execute(f'SELECT uid, addr FROM Addrs WHERE addr LIKE "%{addr}%"')
    uid = cur.fetchone()[0]
    return uid


def add_user(uid):
    # Function to insert new user into database

    cur.execute(f'INSERT INTO Users VALUES ({uid}, "0x00", "0x00", "0x00", "0x00")')
    cur.execute(f'INSERT INTO Addrs VALUES ("0x00", {uid})')
    con.commit()


def get_nft(uid):
    # Function to get user's nft list
    cur.execute(f'SELECT nft_name FROM Users WHERE uid = {uid}')
    nft = cur.fetchone()[0]
    return nft

def get_qr(uid):
    # Function to get user's nft list
    cur.execute(f'SELECT nft FROM Users WHERE uid = {uid}')
    nft = cur.fetchone()[0]
    return nft


def add_nft(uid, new_nft, new_nft_name, new_nft_img, new_nft_des):
    # Function to add nft for user

    cur.execute(f'UPDATE Users SET nft = nft || ", {new_nft}" WHERE uid = {uid}')
    cur.execute(f'UPDATE Users SET nft_name = nft_name || "se@pa@ra$to$r {new_nft_name}" WHERE uid = {uid}')
    cur.execute(f'UPDATE Users SET nft_img = nft_img || ", {new_nft_img}" WHERE uid = {uid}')
    cur.execute(f'UPDATE Users SET nft_des = nft_des || "se@pa@ra$to$r {new_nft_des}" WHERE uid = {uid}')
    con.commit()

def reg_addr(new_addr, uid):
    # Function to bond address to user

    cur.execute(f'UPDATE Addrs SET addr = addr || ", {new_addr}" WHERE uid = {uid}')
    con.commit()

def check_seqno(uid, seqno):
    cur.execute(f'SELECT nft FROM Users WHERE uid = {uid}')
    nft_str = cur.fetchone()[0]
    nft_str = str(nft_str)
    nft_array = nft_str.split(", ") 
    check = nft_array[seqno]


def get_one(uid, seqno):
    cur.execute(f'SELECT nft FROM Users WHERE uid = {uid}')
    nft_str = cur.fetchone()[0]
    nft_str = str(nft_str)
    nft_array = nft_str.split(", ") 
    cur.execute(f'SELECT nft_name FROM Users WHERE uid = {uid}')
    nft_name_str = cur.fetchone()[0]
    nft_name_str = str(nft_name_str)
    nft_name_array = nft_name_str.split("se@pa@ra$to$r ")    
    cur.execute(f'SELECT nft_des FROM Users WHERE uid = {uid}')
    nft_des_str = cur.fetchone()[0]
    nft_des_str = str(nft_des_str)
    nft_des_array = nft_des_str.split("se@pa@ra$to$r ")    
    cur.execute(f'SELECT nft_img FROM Users WHERE uid = {uid}')
    nft_img_str = cur.fetchone()[0]
    nft_img_str = str(nft_img_str)
    nft_img_array = nft_img_str.split(", ")    
    return nft_array[seqno], nft_name_array[seqno], nft_des_array[seqno], nft_img_array[seqno]

def delete_one(uid, seqno):
    cur.execute(f'SELECT nft FROM Users WHERE uid = {uid}')
    nft_str = cur.fetchone()[0]
    nft_str = str(nft_str)
    nft_array = nft_str.split(", ") 
    n = 0
    for i in nft_array:
        if n != seqno:
            if n == 0: 
                new_nft_array = nft_array[n]
            else:
                new_nft_array = new_nft_array + ', ' + nft_array[n]
        n = n + 1
    cur.execute(f'UPDATE Users SET nft = "{new_nft_array}" WHERE uid = {uid}')

    cur.execute(f'SELECT nft_name FROM Users WHERE uid = {uid}')
    nft_name_str = cur.fetchone()[0]
    nft_name_str = str(nft_name_str)
    nft_name_array = nft_name_str.split("se@pa@ra$to$r ")
    n = 0
    for i in nft_name_array:
        if n != seqno:
            if n == 0: 
                new_nft_name_array = nft_name_array[n]
            else:
                new_nft_name_array = new_nft_name_array + 'se@pa@ra$to$r ' + nft_name_array[n]
        n = n + 1
    cur.execute(f'UPDATE Users SET nft_name = "{new_nft_name_array}" WHERE uid = {uid}')

    cur.execute(f'SELECT nft_des FROM Users WHERE uid = {uid}')
    nft_des_str = cur.fetchone()[0]
    nft_des_str = str(nft_des_str)
    nft_des_array = nft_des_str.split("se@pa@ra$to$r ")
    n = 0
    for i in nft_des_array:
        if n != seqno:
            if n == 0: 
                new_nft_des_array = nft_des_array[n]
            else:
                new_nft_des_array = new_nft_des_array + 'se@pa@ra$to$r ' + nft_des_array[n]
        n = n + 1
    cur.execute(f'UPDATE Users SET nft_des = "{new_nft_des_array}" WHERE uid = {uid}')

    cur.execute(f'SELECT nft_img FROM Users WHERE uid = {uid}')
    nft_img_str = cur.fetchone()[0]
    nft_img_str = str(nft_img_str)
    nft_img_array = nft_img_str.split(", ")
    n = 0
    for i in nft_img_array:
        if n != seqno:
            if n == 0: 
                new_nft_img_array = nft_img_array[n]
            else:
                new_nft_img_array = new_nft_img_array + ', ' + nft_img_array[n]
        n = n + 1
    cur.execute(f'UPDATE Users SET nft_img = "{new_nft_img_array}" WHERE uid = {uid}')
    con.commit()