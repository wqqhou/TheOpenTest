import hashlib
import hmac
import codecs
from typing import List, Optional, Tuple
PBKDF_ITERATIONS = 100000
from nacl.bindings import crypto_sign_seed_keypair

def mnemonic_to_entropy(mnemo_words: List[str], password: Optional[str] = None):
    sign = hmac.new((" ".join(mnemo_words)).encode(
        'utf-8'), bytes(0), hashlib.sha512).digest()
    return sign

def mnemonic_to_seed(mnemo_words: List[str], seed: str, password: Optional[str] = None):
    entropy = mnemonic_to_entropy(mnemo_words, password)
    return hashlib.pbkdf2_hmac("sha512", entropy, seed, PBKDF_ITERATIONS)

# First object returned is public key, second is private key.
def mnemonic_to_key(mnemo_words: List[str] ,password: Optional[str] = None) -> Tuple[bytes, bytes]:    
    seed = mnemonic_to_seed(mnemo_words, 'TON default seed'.encode('utf-8'), password)
    return list(crypto_sign_seed_keypair(seed[:32]))

def bytes_to_b64str(bytes_arr):
    return codecs.decode(codecs.encode(
        bytes_arr, "base64"), 'utf-8').replace("\n", '')